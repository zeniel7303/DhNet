// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: dhnet.proto

#include "dhnet.pb.h"
#include "dhnet.grpc.pb.h"

#include <functional>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/impl/channel_interface.h>
#include <grpcpp/impl/client_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/rpc_service_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/sync_stream.h>
namespace dhnet {

static const char* AdminService_method_names[] = {
  "/dhnet.AdminService/HealthCheck",
  "/dhnet.AdminService/ListRooms",
  "/dhnet.AdminService/Broadcast",
};

std::unique_ptr< AdminService::Stub> AdminService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< AdminService::Stub> stub(new AdminService::Stub(channel, options));
  return stub;
}

AdminService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_HealthCheck_(AdminService_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ListRooms_(AdminService_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Broadcast_(AdminService_method_names[2], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status AdminService::Stub::HealthCheck(::grpc::ClientContext* context, const ::dhnet::HealthCheckRequest& request, ::dhnet::HealthCheckResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::dhnet::HealthCheckRequest, ::dhnet::HealthCheckResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_HealthCheck_, context, request, response);
}

void AdminService::Stub::async::HealthCheck(::grpc::ClientContext* context, const ::dhnet::HealthCheckRequest* request, ::dhnet::HealthCheckResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::dhnet::HealthCheckRequest, ::dhnet::HealthCheckResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_HealthCheck_, context, request, response, std::move(f));
}

void AdminService::Stub::async::HealthCheck(::grpc::ClientContext* context, const ::dhnet::HealthCheckRequest* request, ::dhnet::HealthCheckResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_HealthCheck_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::dhnet::HealthCheckResponse>* AdminService::Stub::PrepareAsyncHealthCheckRaw(::grpc::ClientContext* context, const ::dhnet::HealthCheckRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::dhnet::HealthCheckResponse, ::dhnet::HealthCheckRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_HealthCheck_, context, request);
}

::grpc::ClientAsyncResponseReader< ::dhnet::HealthCheckResponse>* AdminService::Stub::AsyncHealthCheckRaw(::grpc::ClientContext* context, const ::dhnet::HealthCheckRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncHealthCheckRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status AdminService::Stub::ListRooms(::grpc::ClientContext* context, const ::dhnet::ListRoomsRequest& request, ::dhnet::ListRoomsResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::dhnet::ListRoomsRequest, ::dhnet::ListRoomsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_ListRooms_, context, request, response);
}

void AdminService::Stub::async::ListRooms(::grpc::ClientContext* context, const ::dhnet::ListRoomsRequest* request, ::dhnet::ListRoomsResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::dhnet::ListRoomsRequest, ::dhnet::ListRoomsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ListRooms_, context, request, response, std::move(f));
}

void AdminService::Stub::async::ListRooms(::grpc::ClientContext* context, const ::dhnet::ListRoomsRequest* request, ::dhnet::ListRoomsResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ListRooms_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::dhnet::ListRoomsResponse>* AdminService::Stub::PrepareAsyncListRoomsRaw(::grpc::ClientContext* context, const ::dhnet::ListRoomsRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::dhnet::ListRoomsResponse, ::dhnet::ListRoomsRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_ListRooms_, context, request);
}

::grpc::ClientAsyncResponseReader< ::dhnet::ListRoomsResponse>* AdminService::Stub::AsyncListRoomsRaw(::grpc::ClientContext* context, const ::dhnet::ListRoomsRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncListRoomsRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status AdminService::Stub::Broadcast(::grpc::ClientContext* context, const ::dhnet::BroadcastRequest& request, ::dhnet::BroadcastResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::dhnet::BroadcastRequest, ::dhnet::BroadcastResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_Broadcast_, context, request, response);
}

void AdminService::Stub::async::Broadcast(::grpc::ClientContext* context, const ::dhnet::BroadcastRequest* request, ::dhnet::BroadcastResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::dhnet::BroadcastRequest, ::dhnet::BroadcastResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Broadcast_, context, request, response, std::move(f));
}

void AdminService::Stub::async::Broadcast(::grpc::ClientContext* context, const ::dhnet::BroadcastRequest* request, ::dhnet::BroadcastResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Broadcast_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::dhnet::BroadcastResponse>* AdminService::Stub::PrepareAsyncBroadcastRaw(::grpc::ClientContext* context, const ::dhnet::BroadcastRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::dhnet::BroadcastResponse, ::dhnet::BroadcastRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_Broadcast_, context, request);
}

::grpc::ClientAsyncResponseReader< ::dhnet::BroadcastResponse>* AdminService::Stub::AsyncBroadcastRaw(::grpc::ClientContext* context, const ::dhnet::BroadcastRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncBroadcastRaw(context, request, cq);
  result->StartCall();
  return result;
}

AdminService::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      AdminService_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< AdminService::Service, ::dhnet::HealthCheckRequest, ::dhnet::HealthCheckResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](AdminService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::dhnet::HealthCheckRequest* req,
             ::dhnet::HealthCheckResponse* resp) {
               return service->HealthCheck(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      AdminService_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< AdminService::Service, ::dhnet::ListRoomsRequest, ::dhnet::ListRoomsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](AdminService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::dhnet::ListRoomsRequest* req,
             ::dhnet::ListRoomsResponse* resp) {
               return service->ListRooms(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      AdminService_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< AdminService::Service, ::dhnet::BroadcastRequest, ::dhnet::BroadcastResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](AdminService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::dhnet::BroadcastRequest* req,
             ::dhnet::BroadcastResponse* resp) {
               return service->Broadcast(ctx, req, resp);
             }, this)));
}

AdminService::Service::~Service() {
}

::grpc::Status AdminService::Service::HealthCheck(::grpc::ServerContext* context, const ::dhnet::HealthCheckRequest* request, ::dhnet::HealthCheckResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status AdminService::Service::ListRooms(::grpc::ServerContext* context, const ::dhnet::ListRoomsRequest* request, ::dhnet::ListRoomsResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status AdminService::Service::Broadcast(::grpc::ServerContext* context, const ::dhnet::BroadcastRequest* request, ::dhnet::BroadcastResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace dhnet

